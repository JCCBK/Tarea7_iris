{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "4a47f089",
   "metadata": {
    "tags": []
   },
   "source": [
    "## Deber sobre FORWARD AND REVERSE "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e5c8d784-74ad-414d-b02a-1449590acdea",
   "metadata": {},
   "source": [
    "# Dogma central de la biología molecular \n",
    "El ARN debe crearse por transcripción a partir del ADN y, además, las proteínas sólo pueden formarse por traducción a partir del ARN.\n",
    "# La transcripción \n",
    "La transcripción consiste en la síntesis de ARN tomando como molde ADN y significa el paso\n",
    "de la información contenida en el ADN hacia el ARN. La transferencia de la información del\n",
    "ADN hacia el ARN se realiza siguiendo las reglas de complementaridad de las bases\n",
    "nitrogenadas y es semejante al proceso de transcripción de textos, motivo por el que ha\n",
    "recibido este nombre. El ARN producto de la transcripción recibe el nombre de transcrito. \n",
    "# La dirección\n",
    "La dirección en la que las ARN polimerasas sintetizan ARN es siempre 5'P→3'OH, es\n",
    "decir el ARN producto de la transcripción crece solamente en esta dirección. Recuerde\n",
    "que la dirección en la que las ADN polimerasas sintetizan ADN es también la misma\n",
    "5'P→3'OH.\n",
    "# Marco abierto de lectura\n",
    "Un marco abierto de lectura, en lo que se refiere a la genómica, es una porción de una secuencia de ADN que no incluye un codón de terminación (que funciona como una señal de detención). Un codón es una secuencia de ADN o ARN de tres nucleótidos (un trinucleótido) que forma una unidad de información genómica que codifica para un aminoácido determinado o señaliza la terminación de la síntesis de una proteína (codón de terminación). Hay 64 codones diferentes: 61 especifican aminoácidos y 3 se usan como codones de terminación. Un marco abierto de lectura largo es, con frecuencia, parte de un gen (es decir, una secuencia que directamente codifica una proteína).\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "838c6db9",
   "metadata": {},
   "outputs": [],
   "source": [
    "seq2=\"AAGGACCNGACATCCATCGCTGATGTCAATCCCCCGTGGATCGTAAGTCCGGGAGTAGGAGGAGGAAGGGTCGTCCCACAGTGCGAAGAGGCTTCTGACCTACTGACGGTACCTCCTCAGTGTCAGCCTATAGTCGGAGCTCGAGGGAGACTCGGTCCTCTGTAAAAGTCCGAATACCTTTGATGAAGGAGGTCTTCTATAGGACGGTAG\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "743cad89-bcbf-4bda-aab8-ddfa9598f3cc",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "5d24d958",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "210"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(seq2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "b3b4e625",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "54.2857"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nuc_c = seq2.count(\"C\")\n",
    "nuc_g = seq2.count(\"G\")\n",
    "len_seq2 = len(seq2)\n",
    "\n",
    "percent_GC = round(100*(nuc_c + nuc_g) / len_seq2, 4)\n",
    "percent_GC "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d4d546c8-1b9e-4e30-96ac-b8f931e5d4f0",
   "metadata": {},
   "source": [
    "# Codon de inicio y parada \n",
    "UAA, UGA, UAG son de alto "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "f5ddfcd7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'ATCCATCGCTGATGTCAATCCCCCGTGGATCGTAAGTCCGGGAGTAG'"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "start = seq2.find(\"ATC\") # Codon de inicio\n",
    "end = seq2.find(\"TAG\") # Codon de final\n",
    "\n",
    "mrna = seq2[start : end + 3] \n",
    "mrna"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "d277ff91",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'AAGGACCNGACUGACUGAGCTGATGTCAUGACCCCGTGGUGAGTAAGTCCGGGAGAUGGAGGAGGAAGGGTCGTCCCACAGTGCGAAGAGGCTTCTGACCTACTGACGGTACCTCCTCAGTGTCAGCCTAAUGTCGGAGCTCGAGGGAGACTCGGTCCTCTGTAAAAGTCCGAATACCTTTGATGAAGGAGGTCTTCTAAUGGACGGAUG'"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dna_show = seq2.replace(\"ATC\", \"UGA\")\n",
    "dna_show = dna_show.replace(\"TAG\", \"AUG\")\n",
    "dna_show"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "88a766c5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "AAGGACCNGACATCCATCGCTGATGTCAATCCCCCGTGGATCGTAAGTCCGGGAGTAGGAGGAGGAAGGGTCGTCCCACAGTGCGAAGAGGCTTCTGACCTACTGACGGTACCTCCTCAGTGTCAGCCTATAGTCGGAGCTCGAGGGAGACTCGGTCCTCTGTAAAAGTCCGAATACCTTTGATGAAGGAGGTCTTCTATAGGACGGTAG\n",
      "TTCCTGGNCTGTAGGTAGCGACTACAGTTAGGGGGCACCTAGCATTCAGGCCCTCATCCTCCTCCTTCCCAGCAGGGTGTCACGCTTCTCCGAAGACTGGATGACTGCCATGGAGGAGTCACAGTCGGATATCAGCCTCGAGCTCCCTCTGAGCCAGGAGACATTTTCAGGCTTATGGAAACTACTTCCTCCAGAAGATATCCTGCCATC\n",
      "CTACCGTCCTATAGAAGACCTCCTTCATCAAAGGTATTCGGACTTTTACAGAGGACCGAGTCTCCCTCGAGCTCCGACTATAGGCTGACACTGAGGAGGTACCGTCAGTAGGTCAGAAGCCTCTTCGCACTGTGGGACGACCCTTCCTCCTCCTACTCCCGGACTTACGATCCACGGGGGATTGACATCAGCGATGGATGTCNGGTCCTT\n"
     ]
    }
   ],
   "source": [
    "seq2_temp = seq2.replace(\"A\", \"t\")\n",
    "seq2_temp = seq2_temp.replace(\"T\", \"a\")\n",
    "seq2_temp = seq2_temp.replace(\"C\", \"g\")\n",
    "seq2_temp = seq2_temp.replace(\"G\", \"c\")\n",
    "cseq2 = seq2_temp.upper()\n",
    "rcseq2 = cseq2[::-1]\n",
    "\n",
    "print(seq2)\n",
    "print(cseq2)\n",
    "print(rcseq2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b3a32a89",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
